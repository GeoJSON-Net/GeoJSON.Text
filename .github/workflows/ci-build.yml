name: 'Build and Test' 

on:
  push:
  pull_request:
    branches: [ main ]
  release:
    types: 
      - published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

  VSTEST_CONNECTION_TIMEOUT: 900
  SOLUTION_NAME: GeoJSON.Text

  # Project name to pack and publish
  PROJECT_NAME: GeoJSON.Text

   # Official NuGet Feed settings
  NUGET_FEED: https://api.nuget.org/v3/index.json
  NUGET_KEY: ${{ secrets.NUGET_KEY }}

jobs:
  build:

    name: 'Build and Test'
    runs-on: ubuntu-latest
             
    steps:
      - uses: actions/checkout@v2      
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: |
            3.1.x
            5.0.x
            6.0.x
      - name: Install dependencies
        run: dotnet restore src/${{ env.PROJECT_NAME }}.sln
      - name: Build solution
        run: dotnet build src/${{ env.PROJECT_NAME }}.sln -c Release --no-restore
      - name: Test
        run: dotnet test src/${{ env.PROJECT_NAME }}.sln -c Release --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=../coverage/
      - uses: codecov/codecov-action@v2
        if: ${{ github.event_name == 'push' }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: src/coverage
          flags: unittests
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: nupkg
          path: src/${{ env.PROJECT_NAME }}/bin/Release/*.nupkg

  deploy:
    name: 'Deploy to Nuget'
    if: github.event_name == 'release'
    needs: build    
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: |
            3.1.x
            5.0.x
            6.0.x
      - name: Create Release NuGet package
        run: |
          arrTag=(${GITHUB_REF//\// })
          VERSION="${arrTag[2]}"
          VERSION="${VERSION//v}"
          dotnet pack -v normal -c Release --include-symbols --include-source -p:PackageVersion=$VERSION -o nupkg src/$PROJECT_NAME/$PROJECT_NAME.csproj
      - name: Push to Nuget
        run: dotnet nuget push nuget/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{secrets.NUGET_KEY}} --skip-duplicate